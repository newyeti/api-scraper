x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - infra-network
      
  broker-1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker-1
    hostname: broker-1
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_INTERNAL://broker-1:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8081"
    networks:
      - infra-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    container_name: schema-registry
    hostname: schema-registry
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
    networks:
      - infra-network
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker-1:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      # SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      # SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker-1
      - schema-registry
    ports:
      - "9021:9021"
    networks:
      - infra-network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker-1:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  
  schema-registry-ui:
    image: landoop/schema-registry-ui
    hostname: schema-registry-ui
    depends_on:
      - broker-1
      - schema-registry
    ports:
      - "8082:8000"
    networks:
      - infra-network
    environment:
      SCHEMAREGISTRY_URL: "http://schema-registry:8081"

  keycloak-mysql:
    container_name: keyclock-mysql
    image: mysql:5.7.41-debian
    volumes:
      - ./data/mysql-keyclock:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root 
      - MYSQL_DATABASE=keyclock
      - MYSQL_USER=keyclock
      - MYSQL_PASSWORD=password
    restart: always
    networks:
      - infra-network
  
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: ["start-dev", "--import-realm"]
    environment:
      - DB_VENDOR=MYSQL 
      - DB_ADDR=mysql
      - DB_DATABASE=keyclock
      - DB_USER=keyclock
      - DB_PASSWORD=password
      - KEYCLOAK_ADMIN=admin 
      - KEYCLOAK_ADMIN_PASSWORD=admin 
    ports:
      - 8080:8080
    volumes:
      - ./realms:/opt/keycloak/data/import
    depends_on:
      - keycloak-mysql
    networks:
      - infra-network
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
    networks:
      - infra-network

  discovery-server:
    container_name: newyeti-discovery-server
    image: sachindramaharjan/newyeti-discovery-server:latest
    pull_policy: always
    ports:
      - 8761:8761
    networks:
      - infra-network
  
  config-server:
    container_name: newyeti-config-server
    image: sachindramaharjan/newyeti-config-server:latest
    pull_policy: always
    ports:
      - 9091:9091
    depends_on:
      - discovery-server
    networks:
      - infra-network
    environment:
      - CONFIG_SERVER_GIT_URI=https://github.com/newyeti/configuration.git
      - EUREKA_SERVICE_URL=http://eureka:password@newyeti-discovery-server:8761/eureka

  api-gateway:
    container_name: newyeti-api-gateway
    image: sachindramaharjan/newyeti-api-gateway:latest
    ports:
      - 8181:8080
    expose:
      - 8181
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - CONFIG_SERVER_URI=http://config-server
      - CONFIG_SERVER_PORT=9091
      - CONFIG_SERVER_TIMEOUT=300
      - DISCOVERY_SERVER_HOSTNAME=${DISCOVERY_SERVER_HOSTNAME}
    pull_policy: always
    networks:
      - infra-network
      - monitoring-network
    depends_on:
      - discovery-server
      - config-server
      - keycloak
      - zipkin
  
  # Observability

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.7
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - monitoring-network
    depends_on:
      - loki
    #logging: *default-logging

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
  
  tempo:
    image: grafana/tempo:2.0.1
    container_name: tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki

  grafana:
    image: grafana/grafana
    user: "472"
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana/
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - loki
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_AUTH_ANONYMOUS_ENABLED="true"
      - GF_AUTH_ANONYMOUS_ORG_ROLE="Admin"
      - GF_AUTH_DISABLE_LOGIN_FORM="true"
    #logging: *default-logging
    
  ## Applications

  beakon:
    container_name: beakon-service 
    image: sachindramaharjan/newyeti-apiscraper-beakon:latest
    pull_policy: always
    restart: always
    ports:
      - "4000:4000"
    networks:
      - infra-network
      - monitoring-network
    depends_on:
      - config-server
      - api-gateway

    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - CONFIG_SERVER_URI=http://config-server
      - CONFIG_SERVER_PORT=9091
      - CONFIG_SERVER_TIMEOUT=300
      - DISCOVERY_SERVER_HOSTNAME=${DISCOVERY_SERVER_HOSTNAME}
      - SPRING_APPLICATION_JSON={"logging.level.org.springframework.cloud.gateway":"DEBUG","logging.level.org.springframework.boot.autoconfigure.web":"DEBUG", "logging.level.web":"DEBUG"}
      - SPRING_PROFILES_ACTIVE=docker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=beakon,compose_service=beakon
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=beakon
    logging: *default-logging
    
volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  infra-network:
    driver: bridge
  monitoring-network:
    driver: bridge