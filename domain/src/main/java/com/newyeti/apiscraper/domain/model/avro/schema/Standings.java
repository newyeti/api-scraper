/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.newyeti.apiscraper.domain.model.avro.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Standings extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6874569699716320097L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Standings\",\"namespace\":\"com.newyeti.apiscraper.domain.model.avro.schema\",\"fields\":[{\"name\":\"all\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"All\",\"fields\":[{\"name\":\"draw\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"goals\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Goals\",\"fields\":[{\"name\":\"goalsAgainst\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"goalsFor\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"lose\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"played\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"win\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"away\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Away\",\"fields\":[{\"name\":\"draw\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"goals\",\"type\":[\"null\",\"Goals\"],\"default\":null},{\"name\":\"lose\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"played\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"win\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"form\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"goalsDiff\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"home\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Home\",\"fields\":[{\"name\":\"draw\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"goals\",\"type\":[\"null\",\"Goals\"],\"default\":null},{\"name\":\"lose\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"played\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"win\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"points\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"rank\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"team\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Team\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"logo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"update\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Standings> ENCODER =
      new BinaryMessageEncoder<Standings>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Standings> DECODER =
      new BinaryMessageDecoder<Standings>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Standings> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Standings> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Standings>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Standings to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Standings from a ByteBuffer. */
  public static Standings fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.newyeti.apiscraper.domain.model.avro.schema.All all;
  @Deprecated public com.newyeti.apiscraper.domain.model.avro.schema.Away away;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.String form;
  @Deprecated public java.lang.Integer goalsDiff;
  @Deprecated public java.lang.String group;
  @Deprecated public com.newyeti.apiscraper.domain.model.avro.schema.Home home;
  @Deprecated public java.lang.Integer points;
  @Deprecated public java.lang.Integer rank;
  @Deprecated public java.lang.String status;
  @Deprecated public com.newyeti.apiscraper.domain.model.avro.schema.Team team;
  @Deprecated public java.lang.String update;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Standings() {}

  /**
   * All-args constructor.
   * @param all The new value for all
   * @param away The new value for away
   * @param description The new value for description
   * @param form The new value for form
   * @param goalsDiff The new value for goalsDiff
   * @param group The new value for group
   * @param home The new value for home
   * @param points The new value for points
   * @param rank The new value for rank
   * @param status The new value for status
   * @param team The new value for team
   * @param update The new value for update
   */
  public Standings(com.newyeti.apiscraper.domain.model.avro.schema.All all, com.newyeti.apiscraper.domain.model.avro.schema.Away away, java.lang.String description, java.lang.String form, java.lang.Integer goalsDiff, java.lang.String group, com.newyeti.apiscraper.domain.model.avro.schema.Home home, java.lang.Integer points, java.lang.Integer rank, java.lang.String status, com.newyeti.apiscraper.domain.model.avro.schema.Team team, java.lang.String update) {
    this.all = all;
    this.away = away;
    this.description = description;
    this.form = form;
    this.goalsDiff = goalsDiff;
    this.group = group;
    this.home = home;
    this.points = points;
    this.rank = rank;
    this.status = status;
    this.team = team;
    this.update = update;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return all;
    case 1: return away;
    case 2: return description;
    case 3: return form;
    case 4: return goalsDiff;
    case 5: return group;
    case 6: return home;
    case 7: return points;
    case 8: return rank;
    case 9: return status;
    case 10: return team;
    case 11: return update;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: all = (com.newyeti.apiscraper.domain.model.avro.schema.All)value$; break;
    case 1: away = (com.newyeti.apiscraper.domain.model.avro.schema.Away)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: form = (java.lang.String)value$; break;
    case 4: goalsDiff = (java.lang.Integer)value$; break;
    case 5: group = (java.lang.String)value$; break;
    case 6: home = (com.newyeti.apiscraper.domain.model.avro.schema.Home)value$; break;
    case 7: points = (java.lang.Integer)value$; break;
    case 8: rank = (java.lang.Integer)value$; break;
    case 9: status = (java.lang.String)value$; break;
    case 10: team = (com.newyeti.apiscraper.domain.model.avro.schema.Team)value$; break;
    case 11: update = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'all' field.
   * @return The value of the 'all' field.
   */
  public com.newyeti.apiscraper.domain.model.avro.schema.All getAll() {
    return all;
  }

  /**
   * Sets the value of the 'all' field.
   * @param value the value to set.
   */
  public void setAll(com.newyeti.apiscraper.domain.model.avro.schema.All value) {
    this.all = value;
  }

  /**
   * Gets the value of the 'away' field.
   * @return The value of the 'away' field.
   */
  public com.newyeti.apiscraper.domain.model.avro.schema.Away getAway() {
    return away;
  }

  /**
   * Sets the value of the 'away' field.
   * @param value the value to set.
   */
  public void setAway(com.newyeti.apiscraper.domain.model.avro.schema.Away value) {
    this.away = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'form' field.
   * @return The value of the 'form' field.
   */
  public java.lang.String getForm() {
    return form;
  }

  /**
   * Sets the value of the 'form' field.
   * @param value the value to set.
   */
  public void setForm(java.lang.String value) {
    this.form = value;
  }

  /**
   * Gets the value of the 'goalsDiff' field.
   * @return The value of the 'goalsDiff' field.
   */
  public java.lang.Integer getGoalsDiff() {
    return goalsDiff;
  }

  /**
   * Sets the value of the 'goalsDiff' field.
   * @param value the value to set.
   */
  public void setGoalsDiff(java.lang.Integer value) {
    this.goalsDiff = value;
  }

  /**
   * Gets the value of the 'group' field.
   * @return The value of the 'group' field.
   */
  public java.lang.String getGroup() {
    return group;
  }

  /**
   * Sets the value of the 'group' field.
   * @param value the value to set.
   */
  public void setGroup(java.lang.String value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'home' field.
   * @return The value of the 'home' field.
   */
  public com.newyeti.apiscraper.domain.model.avro.schema.Home getHome() {
    return home;
  }

  /**
   * Sets the value of the 'home' field.
   * @param value the value to set.
   */
  public void setHome(com.newyeti.apiscraper.domain.model.avro.schema.Home value) {
    this.home = value;
  }

  /**
   * Gets the value of the 'points' field.
   * @return The value of the 'points' field.
   */
  public java.lang.Integer getPoints() {
    return points;
  }

  /**
   * Sets the value of the 'points' field.
   * @param value the value to set.
   */
  public void setPoints(java.lang.Integer value) {
    this.points = value;
  }

  /**
   * Gets the value of the 'rank' field.
   * @return The value of the 'rank' field.
   */
  public java.lang.Integer getRank() {
    return rank;
  }

  /**
   * Sets the value of the 'rank' field.
   * @param value the value to set.
   */
  public void setRank(java.lang.Integer value) {
    this.rank = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'team' field.
   * @return The value of the 'team' field.
   */
  public com.newyeti.apiscraper.domain.model.avro.schema.Team getTeam() {
    return team;
  }

  /**
   * Sets the value of the 'team' field.
   * @param value the value to set.
   */
  public void setTeam(com.newyeti.apiscraper.domain.model.avro.schema.Team value) {
    this.team = value;
  }

  /**
   * Gets the value of the 'update' field.
   * @return The value of the 'update' field.
   */
  public java.lang.String getUpdate() {
    return update;
  }

  /**
   * Sets the value of the 'update' field.
   * @param value the value to set.
   */
  public void setUpdate(java.lang.String value) {
    this.update = value;
  }

  /**
   * Creates a new Standings RecordBuilder.
   * @return A new Standings RecordBuilder
   */
  public static com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder newBuilder() {
    return new com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder();
  }

  /**
   * Creates a new Standings RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Standings RecordBuilder
   */
  public static com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder newBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder other) {
    return new com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder(other);
  }

  /**
   * Creates a new Standings RecordBuilder by copying an existing Standings instance.
   * @param other The existing instance to copy.
   * @return A new Standings RecordBuilder
   */
  public static com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder newBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Standings other) {
    return new com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder(other);
  }

  /**
   * RecordBuilder for Standings instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Standings>
    implements org.apache.avro.data.RecordBuilder<Standings> {

    private com.newyeti.apiscraper.domain.model.avro.schema.All all;
    private com.newyeti.apiscraper.domain.model.avro.schema.All.Builder allBuilder;
    private com.newyeti.apiscraper.domain.model.avro.schema.Away away;
    private com.newyeti.apiscraper.domain.model.avro.schema.Away.Builder awayBuilder;
    private java.lang.String description;
    private java.lang.String form;
    private java.lang.Integer goalsDiff;
    private java.lang.String group;
    private com.newyeti.apiscraper.domain.model.avro.schema.Home home;
    private com.newyeti.apiscraper.domain.model.avro.schema.Home.Builder homeBuilder;
    private java.lang.Integer points;
    private java.lang.Integer rank;
    private java.lang.String status;
    private com.newyeti.apiscraper.domain.model.avro.schema.Team team;
    private com.newyeti.apiscraper.domain.model.avro.schema.Team.Builder teamBuilder;
    private java.lang.String update;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.all)) {
        this.all = data().deepCopy(fields()[0].schema(), other.all);
        fieldSetFlags()[0] = true;
      }
      if (other.hasAllBuilder()) {
        this.allBuilder = com.newyeti.apiscraper.domain.model.avro.schema.All.newBuilder(other.getAllBuilder());
      }
      if (isValidValue(fields()[1], other.away)) {
        this.away = data().deepCopy(fields()[1].schema(), other.away);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAwayBuilder()) {
        this.awayBuilder = com.newyeti.apiscraper.domain.model.avro.schema.Away.newBuilder(other.getAwayBuilder());
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.form)) {
        this.form = data().deepCopy(fields()[3].schema(), other.form);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.goalsDiff)) {
        this.goalsDiff = data().deepCopy(fields()[4].schema(), other.goalsDiff);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.group)) {
        this.group = data().deepCopy(fields()[5].schema(), other.group);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.home)) {
        this.home = data().deepCopy(fields()[6].schema(), other.home);
        fieldSetFlags()[6] = true;
      }
      if (other.hasHomeBuilder()) {
        this.homeBuilder = com.newyeti.apiscraper.domain.model.avro.schema.Home.newBuilder(other.getHomeBuilder());
      }
      if (isValidValue(fields()[7], other.points)) {
        this.points = data().deepCopy(fields()[7].schema(), other.points);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rank)) {
        this.rank = data().deepCopy(fields()[8].schema(), other.rank);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.team)) {
        this.team = data().deepCopy(fields()[10].schema(), other.team);
        fieldSetFlags()[10] = true;
      }
      if (other.hasTeamBuilder()) {
        this.teamBuilder = com.newyeti.apiscraper.domain.model.avro.schema.Team.newBuilder(other.getTeamBuilder());
      }
      if (isValidValue(fields()[11], other.update)) {
        this.update = data().deepCopy(fields()[11].schema(), other.update);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Standings instance
     * @param other The existing instance to copy.
     */
    private Builder(com.newyeti.apiscraper.domain.model.avro.schema.Standings other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.all)) {
        this.all = data().deepCopy(fields()[0].schema(), other.all);
        fieldSetFlags()[0] = true;
      }
      this.allBuilder = null;
      if (isValidValue(fields()[1], other.away)) {
        this.away = data().deepCopy(fields()[1].schema(), other.away);
        fieldSetFlags()[1] = true;
      }
      this.awayBuilder = null;
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.form)) {
        this.form = data().deepCopy(fields()[3].schema(), other.form);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.goalsDiff)) {
        this.goalsDiff = data().deepCopy(fields()[4].schema(), other.goalsDiff);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.group)) {
        this.group = data().deepCopy(fields()[5].schema(), other.group);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.home)) {
        this.home = data().deepCopy(fields()[6].schema(), other.home);
        fieldSetFlags()[6] = true;
      }
      this.homeBuilder = null;
      if (isValidValue(fields()[7], other.points)) {
        this.points = data().deepCopy(fields()[7].schema(), other.points);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rank)) {
        this.rank = data().deepCopy(fields()[8].schema(), other.rank);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.team)) {
        this.team = data().deepCopy(fields()[10].schema(), other.team);
        fieldSetFlags()[10] = true;
      }
      this.teamBuilder = null;
      if (isValidValue(fields()[11], other.update)) {
        this.update = data().deepCopy(fields()[11].schema(), other.update);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'all' field.
      * @return The value.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.All getAll() {
      return all;
    }

    /**
      * Sets the value of the 'all' field.
      * @param value The value of 'all'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setAll(com.newyeti.apiscraper.domain.model.avro.schema.All value) {
      validate(fields()[0], value);
      this.allBuilder = null;
      this.all = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'all' field has been set.
      * @return True if the 'all' field has been set, false otherwise.
      */
    public boolean hasAll() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'all' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.All.Builder getAllBuilder() {
      if (allBuilder == null) {
        if (hasAll()) {
          setAllBuilder(com.newyeti.apiscraper.domain.model.avro.schema.All.newBuilder(all));
        } else {
          setAllBuilder(com.newyeti.apiscraper.domain.model.avro.schema.All.newBuilder());
        }
      }
      return allBuilder;
    }

    /**
     * Sets the Builder instance for the 'all' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setAllBuilder(com.newyeti.apiscraper.domain.model.avro.schema.All.Builder value) {
      clearAll();
      allBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'all' field has an active Builder instance
     * @return True if the 'all' field has an active Builder instance
     */
    public boolean hasAllBuilder() {
      return allBuilder != null;
    }

    /**
      * Clears the value of the 'all' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearAll() {
      all = null;
      allBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'away' field.
      * @return The value.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Away getAway() {
      return away;
    }

    /**
      * Sets the value of the 'away' field.
      * @param value The value of 'away'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setAway(com.newyeti.apiscraper.domain.model.avro.schema.Away value) {
      validate(fields()[1], value);
      this.awayBuilder = null;
      this.away = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'away' field has been set.
      * @return True if the 'away' field has been set, false otherwise.
      */
    public boolean hasAway() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'away' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Away.Builder getAwayBuilder() {
      if (awayBuilder == null) {
        if (hasAway()) {
          setAwayBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Away.newBuilder(away));
        } else {
          setAwayBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Away.newBuilder());
        }
      }
      return awayBuilder;
    }

    /**
     * Sets the Builder instance for the 'away' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setAwayBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Away.Builder value) {
      clearAway();
      awayBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'away' field has an active Builder instance
     * @return True if the 'away' field has an active Builder instance
     */
    public boolean hasAwayBuilder() {
      return awayBuilder != null;
    }

    /**
      * Clears the value of the 'away' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearAway() {
      away = null;
      awayBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'form' field.
      * @return The value.
      */
    public java.lang.String getForm() {
      return form;
    }

    /**
      * Sets the value of the 'form' field.
      * @param value The value of 'form'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setForm(java.lang.String value) {
      validate(fields()[3], value);
      this.form = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'form' field has been set.
      * @return True if the 'form' field has been set, false otherwise.
      */
    public boolean hasForm() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'form' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearForm() {
      form = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'goalsDiff' field.
      * @return The value.
      */
    public java.lang.Integer getGoalsDiff() {
      return goalsDiff;
    }

    /**
      * Sets the value of the 'goalsDiff' field.
      * @param value The value of 'goalsDiff'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setGoalsDiff(java.lang.Integer value) {
      validate(fields()[4], value);
      this.goalsDiff = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'goalsDiff' field has been set.
      * @return True if the 'goalsDiff' field has been set, false otherwise.
      */
    public boolean hasGoalsDiff() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'goalsDiff' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearGoalsDiff() {
      goalsDiff = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'group' field.
      * @return The value.
      */
    public java.lang.String getGroup() {
      return group;
    }

    /**
      * Sets the value of the 'group' field.
      * @param value The value of 'group'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setGroup(java.lang.String value) {
      validate(fields()[5], value);
      this.group = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'group' field has been set.
      * @return True if the 'group' field has been set, false otherwise.
      */
    public boolean hasGroup() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'group' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearGroup() {
      group = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'home' field.
      * @return The value.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Home getHome() {
      return home;
    }

    /**
      * Sets the value of the 'home' field.
      * @param value The value of 'home'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setHome(com.newyeti.apiscraper.domain.model.avro.schema.Home value) {
      validate(fields()[6], value);
      this.homeBuilder = null;
      this.home = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'home' field has been set.
      * @return True if the 'home' field has been set, false otherwise.
      */
    public boolean hasHome() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'home' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Home.Builder getHomeBuilder() {
      if (homeBuilder == null) {
        if (hasHome()) {
          setHomeBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Home.newBuilder(home));
        } else {
          setHomeBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Home.newBuilder());
        }
      }
      return homeBuilder;
    }

    /**
     * Sets the Builder instance for the 'home' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setHomeBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Home.Builder value) {
      clearHome();
      homeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'home' field has an active Builder instance
     * @return True if the 'home' field has an active Builder instance
     */
    public boolean hasHomeBuilder() {
      return homeBuilder != null;
    }

    /**
      * Clears the value of the 'home' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearHome() {
      home = null;
      homeBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'points' field.
      * @return The value.
      */
    public java.lang.Integer getPoints() {
      return points;
    }

    /**
      * Sets the value of the 'points' field.
      * @param value The value of 'points'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setPoints(java.lang.Integer value) {
      validate(fields()[7], value);
      this.points = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'points' field has been set.
      * @return True if the 'points' field has been set, false otherwise.
      */
    public boolean hasPoints() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'points' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearPoints() {
      points = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'rank' field.
      * @return The value.
      */
    public java.lang.Integer getRank() {
      return rank;
    }

    /**
      * Sets the value of the 'rank' field.
      * @param value The value of 'rank'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setRank(java.lang.Integer value) {
      validate(fields()[8], value);
      this.rank = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'rank' field has been set.
      * @return True if the 'rank' field has been set, false otherwise.
      */
    public boolean hasRank() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'rank' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearRank() {
      rank = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setStatus(java.lang.String value) {
      validate(fields()[9], value);
      this.status = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearStatus() {
      status = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'team' field.
      * @return The value.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Team getTeam() {
      return team;
    }

    /**
      * Sets the value of the 'team' field.
      * @param value The value of 'team'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setTeam(com.newyeti.apiscraper.domain.model.avro.schema.Team value) {
      validate(fields()[10], value);
      this.teamBuilder = null;
      this.team = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'team' field has been set.
      * @return True if the 'team' field has been set, false otherwise.
      */
    public boolean hasTeam() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'team' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Team.Builder getTeamBuilder() {
      if (teamBuilder == null) {
        if (hasTeam()) {
          setTeamBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Team.newBuilder(team));
        } else {
          setTeamBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Team.newBuilder());
        }
      }
      return teamBuilder;
    }

    /**
     * Sets the Builder instance for the 'team' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setTeamBuilder(com.newyeti.apiscraper.domain.model.avro.schema.Team.Builder value) {
      clearTeam();
      teamBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'team' field has an active Builder instance
     * @return True if the 'team' field has an active Builder instance
     */
    public boolean hasTeamBuilder() {
      return teamBuilder != null;
    }

    /**
      * Clears the value of the 'team' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearTeam() {
      team = null;
      teamBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'update' field.
      * @return The value.
      */
    public java.lang.String getUpdate() {
      return update;
    }

    /**
      * Sets the value of the 'update' field.
      * @param value The value of 'update'.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder setUpdate(java.lang.String value) {
      validate(fields()[11], value);
      this.update = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'update' field has been set.
      * @return True if the 'update' field has been set, false otherwise.
      */
    public boolean hasUpdate() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'update' field.
      * @return This builder.
      */
    public com.newyeti.apiscraper.domain.model.avro.schema.Standings.Builder clearUpdate() {
      update = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Standings build() {
      try {
        Standings record = new Standings();
        if (allBuilder != null) {
          record.all = this.allBuilder.build();
        } else {
          record.all = fieldSetFlags()[0] ? this.all : (com.newyeti.apiscraper.domain.model.avro.schema.All) defaultValue(fields()[0]);
        }
        if (awayBuilder != null) {
          record.away = this.awayBuilder.build();
        } else {
          record.away = fieldSetFlags()[1] ? this.away : (com.newyeti.apiscraper.domain.model.avro.schema.Away) defaultValue(fields()[1]);
        }
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.form = fieldSetFlags()[3] ? this.form : (java.lang.String) defaultValue(fields()[3]);
        record.goalsDiff = fieldSetFlags()[4] ? this.goalsDiff : (java.lang.Integer) defaultValue(fields()[4]);
        record.group = fieldSetFlags()[5] ? this.group : (java.lang.String) defaultValue(fields()[5]);
        if (homeBuilder != null) {
          record.home = this.homeBuilder.build();
        } else {
          record.home = fieldSetFlags()[6] ? this.home : (com.newyeti.apiscraper.domain.model.avro.schema.Home) defaultValue(fields()[6]);
        }
        record.points = fieldSetFlags()[7] ? this.points : (java.lang.Integer) defaultValue(fields()[7]);
        record.rank = fieldSetFlags()[8] ? this.rank : (java.lang.Integer) defaultValue(fields()[8]);
        record.status = fieldSetFlags()[9] ? this.status : (java.lang.String) defaultValue(fields()[9]);
        if (teamBuilder != null) {
          record.team = this.teamBuilder.build();
        } else {
          record.team = fieldSetFlags()[10] ? this.team : (com.newyeti.apiscraper.domain.model.avro.schema.Team) defaultValue(fields()[10]);
        }
        record.update = fieldSetFlags()[11] ? this.update : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Standings>
    WRITER$ = (org.apache.avro.io.DatumWriter<Standings>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Standings>
    READER$ = (org.apache.avro.io.DatumReader<Standings>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
