---
name: Build and Push docker image to GCP

on:
  push: 
    branches: ["main"]
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions: 
      contents: write
    
    if: contains(github.event.head_commit.message, 'release') ||
      contains(github.event.head_commit.message, 'bump') ||
      contains(github.event.head_commit.message, 'gcp')

    env:
      IMAGE_NAME: config-server
      PROJECT_ID: ${{ secrets.PROJECT_ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ env.PROJECT_ID }}
        version: '>= 416.0.0'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: 'Get Git Tag from commit message'
      id: determine-git-tag
      env:
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |-
        bash ./scripts/git_version.sh
        
    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        bash ./scripts/git_update.sh -v $GIT_TAG_TYPE
    
    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
    
    - name: Configure maven settings.xml
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        mirrors: >
          [{
            "id": "maven-default-http-blocker",
            "name": "Pseudo repository to mirror external repositories initially using HTTP.",
            "mirrorOf": "external:http:*",
            "url": "http://0.0.0.0/"
          },
          {
            "id": "confluent",
            "name": "Confluent mirror",
            "mirrorOf": "confluent",
            "url": "http://packages.confluent.io/maven/"
          }]
        output_file: .m2/maven_settings.xml

    - name: Push Docker Image to Artifact Registry
      run: ./mvnw -Denv=gcp -s .m2/maven_settings.xml --file pom.xml clean package jib:build
    
    outputs:
      GIT_TAG: ${{ steps.build.outputs.GIT_TAG }}

  deploy_to_gcp_cloud_run:
    needs: build
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout terraform project
      uses: actions/checkout@v2
      with:
        repository: 'newyeti/terraform-ci-cd'
        ref: 'main'
    
     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_SA_CREDENTIAL }}
        terraform_version: 1.5.1
        terraform_wrapper: false

    - name: Create credential file
      working-directory: ./gcp
      run: echo "${{ secrets.TF_VAR_CREDENTIAL_FILE }}" | base64 -d >> "credentials.json"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./gcp
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./gcp
      run: |
        echo "New Git Tag is ${{ needs.build.outputs.GIT_TAG }}"
        terraform plan -input=false -var 'project=${{ secrets.PROJECT_ID }}' -var 'credential_file=credentials.json' -var 'ps_git_tag=${{ needs.build.outputs.GIT_TAG }}'

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./gcp
      run: terraform apply -auto-approve -input=false -var 'project=${{ secrets.PROJECT_ID }}' -var 'credential_file=credentials.json' -var 'ps_git_tag=${{ needs.build.outputs.GIT_TAG }}'

